System h2

Dispatch sending_patient_parameter : sending_patient_parameter(ID,PARAMETER,TIMESTAMP)
Dispatch patient_parameters_request : patient_parameters_request(ID)
Dispatch patient_parameters_request_from_doctor : patient_parameters_request_from_doctor(DOCID,PATID)
Dispatch patient_parameters_response : patient_parameters_response(LIST)
Dispatch notification : notification(ID,DESCRIPTION)
Dispatch advice : advice(DOCID,NICKNAME,DESCRIPTION)
Dispatch login_response : login_response(NICKNAME,DESCRIPTION)
Dispatch success : success
Dispatch failure : failure
Dispatch repeat : repeat
Dispatch finish : finish
Dispatch association : association(PATID)
Dispatch association_response : association_response(LIST)
Dispatch check_association : check_association(DOCID,PATID)
Dispatch check_association_response : check_association_response(RESP)
Dispatch request_id : request_id(ACTORNAME,DOCID,NICKNAME)
Dispatch request_id_response : request_id_response(ID)
Dispatch register_nickname : register_nickname(ID,NICKNAME)
Dispatch doctor_data_request_gui : doctor_data_request_gui(PATNICKNAME)
Dispatch doctor_notification_sender_gui : doctor_notification_sender_gui(INPUT)
Event    patient_data_request : patient_data_request(ID)
Event    register_request : register_request(NICKNAME,TYPE)
Event    login_request : login_request(NICKNAME,TYPE,NAME)
Event    patient_login : patient_login
Event    doctor_login : doctor_login


//requirements: business 1,2,3,4,5,6,7 e functional 1,2,3,4,5,6,7
Context ctx_data_centre 	ip[host="localhost" port=8070] //-g cyan
Context ctx_manager 	ip[host="localhost" port=8050] //-g cyan
Context ctx_patient 	ip[host="localhost" port=1278] //-g green
Context ctx_patient_model 		ip[host="localhost" port=1234] //-g green
Context ctx_doctor  	ip[host="localhost" port=3478] //-g white
Context ctx_doctor_model  		ip[host="localhost" port=3456] //-g white

EventHandler evh for patient_data_request, register_request, login_request -print;

QActor qpatient_login context ctx_patient {
	
	Rules {
		myNewName(Prot,Name,N1) :-
			value(nameCounter,N1),
			text_term(N1S,N1), 
			text_term(ProtS,Prot),
 			text_concat(ProtS,N1S,Name),
			replaceRule(instance(_,_,_),
			instance(Prot,N1,Name)).
			
	 	id_and_nickname(ID,NICKNAME) :- nickname(NICKNAME), value(_,ID).
	}
	
	Plan init normal [
		println(" --- [PL] initializing --- ");
		actorOp createGUI	
	] switchTo waitResponse
	
	Plan waitResponse [
		println(" --- [PL] waiting response --- ")
	] transition stopAfter 86400000
	  whenMsg login_response -> loginResponse
	  finally repeatPlan
	  
	Plan loginResponse [
		println(" --- [PL] login response --- ");
		removeRule login(_);
		onMsg login_response : login_response(NICKNAME,DESCRIPTION) -> addRule login(NICKNAME,DESCRIPTION);
		[!? login(_,DESCRIPTION)] actorOp print(DESCRIPTION);
		[!? login(NICKNAME,"Login ok")] addRule nickname(NICKNAME);
		[!? login(_,"Login ok")] switchTo createActors;
		removeRule login(_,_)
	] switchTo waitResponse
	
	Plan createActors [
		println(" --- [PL] creating actors --- ");
		[!? newName(qpatient_sender, Name, N)] demo createActor(Name, 'it.unibo.qpatient_sender.Qpatient_sender');
		[!? myNewName(qpatient_data_retriever, Name, N)] demo createActor(Name, 'it.unibo.qpatient_data_retriever.Qpatient_data_retriever');
		[!? myNewName(qpatient_notification_receiver, Name, N)] demo createActor(Name, 'it.unibo.qpatient_notification_receiver.Qpatient_notification_receiver')
	] switchTo registerPatients
	
	Plan registerPatients [
		println(" --- [PL] creating actors --- ");
//		actorOp getNickname;
//		[?? actorOpDone(OP,R)] addRule nickname(R);
		//[!? nickname(R)]  actorOp print(nick(R));
		[!? id_and_nickname(ID,NICKNAME)] actorOp print(nicknameAndIDdelPazienteLoggato(ID,NICKNAME)); 
		[!? id_and_nickname(ID,NICKNAME)] forward qmanager_patients_name -m register_nickname : register_nickname(ID,NICKNAME);
		removeRule nickname(NICKNAME)
	] switchTo waitResponse
}

QActor qpatient_sender context ctx_patient_model {
	/*
	Plan init normal [
		println(" --- [PS] initializing --- ")	
	] switchTo waitLogin
	*/
	Plan init normal[
		println(" --- [PS] initializing --- ")
	] switchTo sendData
	
	Plan sendData [
		println(" --- [PS] sending data --- ");
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(R,37,"12/12/12");
		delay 15000;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(R,38,"12/12/12");
		delay 15000;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(R,39,"12/12/12");
		delay 15000
	] finally repeatPlan
	
}

QActor qpatient_data_retriever context ctx_patient_model {
	
	Rules{
		check_myid(ID) :- myID(ID), received(I), check(ID,I).
		check(I,I).
		
		check_and_get_name(NAME) :- check_myid(_),
							        get_name(NAME).
							        
		get_name(NAME) :- myID(ID),
						  text_term(I,ID),
						  text_concat('qpatient_data_retriever',I,NAME), !.		        
							        
		check_not_equal(NAME) :-  myID(ID), received(I),eval(lt,I,ID),get_name(NAME).
		check_not_equal(NAME) :-  myID(ID), received(I),eval(gt,I,ID),get_name(NAME).
	}
	/*
	Plan waitLogin normal[
		println(" --- [PR] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent patient_login -> init
	  finally repeatPlan
	*/  
	Plan init normal [
		actorOp print(" --- [PR] initializing --- ");
		actorOp createGUI;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] addRule myID(R)
		//[!? myID(ID)] actorOp print(primo(ID))
	] switchTo waitUserRequest
	  
	Plan waitUserRequest [
		actorOp print(" --- [PR] waiting for user request --- ")
	] transition stopAfter 86400000
	  whenEvent patient_data_request -> requestData
	  finally repeatPlan
	
	Plan requestData [
		actorOp print(" --- [PR] requesting data --- ");
		onEvent patient_data_request : patient_data_request(I) -> addRule received(I);
		//[!? received(ID)] actorOp print(secondo(ID));
		//printCurrentEvent;
		//[!? check_myid(ID)] actorOp print(ciao(ID));
		[!? check_myid(ID)] forward qdc_data_receiver -m patient_parameters_request : patient_parameters_request(ID); 
		[!? check_and_get_name(NAME)] forward NAME -m success : success; 
		[!? check_not_equal(NAME)] forward NAME -m failure : failure;
		removeRule received(I)
	] transition stopAfter 30000
	  whenMsg success -> waitResponse,
	  whenMsg failure -> waitUserRequest
	  finally repeatPlan
	
	Plan waitResponse resumeLastPlan [
		actorOp print(" --- [PR] waiting for a response --- ")
	] transition stopAfter 600000
	  whenMsg patient_parameters_response -> visualiseData
	  
	Plan visualiseData [
		actorOp print(" --- [PR] visualizing data --- ");
		onMsg patient_parameters_response : patient_parameters_response(LIST) -> actorOp print(LIST)
	] switchTo waitUserRequest
}

QActor qpatient_notification_receiver context ctx_patient_model {
	/*
	Plan waitLogin normal[
		println(" --- [PNR] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent patient_login -> init
	  finally repeatPlan
	*/  
	Plan init normal [
		println(" --- [PNR] initializing --- ");
		actorOp createGUI
	] switchTo waitNotification
	
	Plan waitNotification [
		actorOp print(" --- [PNR] waiting notification --- ")
	] transition stopAfter 86400000
	  whenMsg notification -> visualizeNotification
	  finally repeatPlan
	  
	Plan visualizeNotification resumeLastPlan [
		actorOp print(" --- [PNR] receive notification --- ");
		onMsg notification : notification(ID, DESCRIPTION) -> actorOp print(DESCRIPTION)
	]
	
}

QActor qdc_data_receiver context ctx_data_centre  {
	
	Rules {
		request_parameters(A,NAME,LIST) :- patient_id(ID),
									       text_term(I,ID),
									       text_concat(A,I,NAME),
									       findall(patient_parameter(ID,X,Y), patient_parameter(ID,X,Y),LIST),
									       retract(patient_id(ID)),!.
									   
		request_parameters_from_doc(A,NAME,LIST,RESP) :- doc_and_pat_id(DOCID,PATID),
									                     text_term(I,DOCID),
									                     text_concat(A,I,NAME),
									                     findall(patient_parameter(PATID,X,Y), patient_parameter(PATID,X,Y),LIST),
									                     resp(RESP),
									                     retract(doc_and_pat_id(DOCID,PATID)),
									                     retract(resp(RESP)),!.					  
	}
	
	Plan init normal [
		println(" --- [DC] initializing --- ")	
	] switchTo waitMessages
	
	Plan waitMessages [
		println(" --- [DC] waiting messages --- ")
	] transition stopAfter 86400000
	  whenMsg sending_patient_parameter -> saveParameter,
	  whenMsg patient_parameters_request -> handleRequest,
	  whenMsg patient_parameters_request_from_doctor -> handleDoctorRequest
	  finally repeatPlan
	  
	Plan saveParameter [
		println(" --- [DC] saving parameters --- ");
		onMsg sending_patient_parameter : sending_patient_parameter(ID,PARAMETER,TIMESTAMP) -> demo asserta(patient_parameter(ID,PARAMETER,TIMESTAMP))
	] switchTo sendToAnalyser
	
	Plan sendToAnalyser [
		println(" --- [DC] sending to analyzer --- ");
		[!? patient_parameter(ID,PARAMETER, TIMESTAMP)] forward qdc_analyser -m sending_patient_parameter : sending_patient_parameter(ID,PARAMETER, TIMESTAMP) 
	] switchTo waitMessages
	
	Plan handleRequest resumeLastPlan [
		println(" --- [DC] handling parameters request --- ");
		//printCurrentMessage;
		onMsg patient_parameters_request : patient_parameters_request(ID) -> demo asserta(patient_id(ID));
		//actorOp memoCurrentCaller;
		//[!? patient_id(ID)] println(ID); 
		[!? request_parameters('qpatient_data_retriever',NAME,LIST)] sendto NAME in ctx_patient -m patient_parameters_response : patient_parameters_response(LIST)		
	]
	
	Plan handleDoctorRequest resumeLastPlan [
		println(" --- [DC] handling parameters request from doctor --- ");
		//TODO patient_parameters_request_from_doctor(ACTORNAME,DOCID,PATID)
		onMsg patient_parameters_request_from_doctor : patient_parameters_request_from_doctor(DOCID,PATID) -> demo asserta(doc_and_pat_id(DOCID,PATID));
		//actorOp memoCurrentCaller;
		//[!? patient_id(ID)] println(ID); 
		[!? doc_and_pat_id(DOCID,PATID)] forward qmanager_associations -m check_association : check_association(DOCID,PATID)
	] switchTo waitAssociation
	
	Plan waitAssociation [
		println(" --- [DC] waiting patient and doctor association --- ")
	] transition stopAfter 86400000
	  whenMsg check_association_response -> handleResp
	  finally repeatPlan
		
	Plan handleResp [
		println(" --- [DC] handling association response--- ");
		onMsg check_association_response : check_association_response(RESP) -> addRule resp(RESP);
		[!? request_parameters_from_doc('qdoctor_data_retriever',NAME,LIST,"ok")] sendto NAME in ctx_doctor -m patient_parameters_response : patient_parameters_response(LIST);
		[!? request_parameters_from_doc('qdoctor_data_retriever',NAME,_,"no")] sendto NAME in ctx_doctor -m failure : failure	
	] switchTo waitMessages
	
}

QActor qdc_analyser context ctx_data_centre {
	
	Rules {
		analyser(VAL, febbre) :- eval(gt, VAL, 37),!.
		analyser(VAL, non_febbre) :- eval(gt, 37, VAL), !.
		analyser(37, non_febbre).
		
		analyse(ID,RESP) :- 
			parameter(ID,PARAMETER),
			analyser(PARAMETER, RESP).
	}
	
	Plan init normal [
		println(" --- [A] initializing --- ")	
	] switchTo waitParameter
	
	Plan waitParameter [
		println(" --- [A] waiting parameter--- ")
	] transition stopAfter 86400000
	  whenMsg sending_patient_parameter -> analyse
	  finally repeatPlan
	  
	Plan analyse resumeLastPlan [
		println(" --- [A] analyzing parameter--- ");
		onMsg sending_patient_parameter : sending_patient_parameter(ID,PARAMETER, TIMESTAMP) -> addRule parameter(ID,PARAMETER);
		[!? analyse(ID,RESP)] println(RESP);
		[!? analyse(ID,RESP)] forward qdc_notification_manager -m notification : notification(ID,RESP);	
		[!? analyse(ID,RESP)] removeRule parameter(ID,PARAMETER)
	]
	
}

QActor qdc_notification_manager context ctx_data_centre {
	
	Rules {
		request_name(A,NAME,DESCRIPTION) :- notification(ID,DESCRIPTION),
									        text_term(I,ID),
									        text_concat(A,I,NAME),!.
		
		//TODO è sbagliato							        
	/*	request_name_advice(NAME,ADVICE) :- patient(ID),
											advice(DOCID,NICKNAME,ADVICE),
									        text_term(I,ID),
									        text_concat(ACTORNAME,I,NAME),
									        retract(patient(ID)),!.
									        * 
									        */
									       
		request_doctor_name(A,NAME,DESCRIPTION) :- doc(ID),
		                                           notification(_,DESCRIPTION),
									       		   text_term(I,ID),
									               text_concat(A,I,NAME),!.
		
		send_to_doctor(febbre) :- notification(ID,febbre).
		
		send_advice(NAME,ADVICE,RESP) :- advice(DOCID,NICKNAME,ADVICE),
										 
									     text_term(I,DOCID),
									     text_concat('qpatient_notification_receiver',I,NAME),
									     resp(RESP),!.
	}
	
	Plan init normal [
		println(" --- [NM] initializing --- ")	
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [NM] waiting notification --- ");
		removeRule notification(_,_)
	] transition stopAfter 86400000
	  whenMsg notification -> handleNotification,
	  whenMsg advice -> handleAdvice
	  finally repeatPlan
	  
	Plan handleNotification resumeLastPlan [
		println(" --- [NM] handling notification --- ");
		onMsg notification : notification(ID,DESCRIPTION) -> addRule notification(ID,DESCRIPTION);
		[!? request_name('qpatient_notification_receiver',NAME,DESCRIPTION)] sendto NAME in ctx_patient -m notification : notification(ID,DESCRIPTION);
		[!? notification(ID,febbre)] forward qmanager_associations -m association : association(ID);
		[!? notification(_,febbre)] forward qdc_notification_manager -m success : success;
		[!? notification(_,non_febbre)] forward qdc_notification_manager -m failure : failure 
		 			
	] transition stopAfter 30000
	  whenMsg success -> waitResponse,
	  whenMsg failure -> waitNotification
	
	Plan waitResponse [
		println(" --- [NM] waiting response --- ")
	] transition stopAfter 120000
	  whenMsg association_response -> getResponse
	  finally repeatPlan
	
	Plan getResponse [
		println(" --- [NM] handle response --- ");
		onMsg association_response : association_response(LIST) -> actorOp getDoctors(LIST)
	] switchTo sendNotification
	
	Plan sendNotification [
		println(" --- [NM] sending notifications --- ");
		[!? request_doctor_name('qdoctor_notification_receiver',NAME,DESCRIPTION)] sendto NAME in ctx_doctor -m notification : notification(ID,DESCRIPTION);
		[?? doc(_)] forward qdc_notification_manager -m repeat : repeat else forward qdc_notification_manager -m finish : finish
	] transition stopAfter 120000
	  whenMsg repeat -> sendNotification,
	  whenMsg finish -> waitNotification
	  
	Plan handleAdvice resumeLastPlan [
		println(" --- [NM] handling advice --- ");
		onMsg advice : advice(DOCID,NICKNAME,ADVICE) -> addRule advice(DOCID,NICKNAME,ADVICE)//;
		//TODO request_id(DOCID,NICKNAME)
		//[!? advice(ACTORNAME,DOCID,NICKNAME,DESCRIPTION)] forward qmanager_patients_name -m request_id : request_id(ACTORNAME,DOCID,NICKNAME)	
	] switchTo checkAssociation
	/*
	Plan waitId [
		println(" --- [NM] waiting id --- ")
	] transition stopAfter 120000
	  whenMsg request_id_response -> checkAssociation
	  finally repeatPlan
	  * 
	  */
	
	Plan checkAssociation [
		println(" --- [NM] check association --- ");
		onMsg request_id_response : request_id_response(ID) -> addRule patient(ID);
		[!? advice(DOCID,NICKNAME,DESCRIPTION)] forward qmanager_associations -m check_association : check_association(DOCID,PATID)
	] switchTo waitCheck
	
	Plan waitCheck [
		println(" --- [NM] waiting association --- ")
	] transition stopAfter 120000
	  whenMsg check_association_response -> sendAdvice
	  finally repeatPlan
	
	Plan sendAdvice[
		println(" --- [NM] sending advice --- ");
		println(" --- [DC] handling association response--- ");
		onMsg check_association_response : check_association_response(RESP) -> addRule resp(RESP);
		[!? send_advice(NAME,ADVICE,"ok")] sendto NAME in ctx_patient -m notification : notification(ID,ADVICE);
		removeRule advice(_,_,_)
	] switchTo waitNotification
	
}

QActor qdc_user_manager context ctx_data_centre {
	
	Rules {
		alreadyRegistered :- registration(NICKNAME, _), registered(NICKNAME,_).
		
		correct_registration :- registration(NICKNAME,TYPE), assert(registered(NICKNAME,TYPE)), retract(registration(_,_)).
		
		can_login(NICKNAME,NAME) :- login(NICKNAME,TYPE,NAME), registered(NICKNAME,TYPE), retract(login(_,_,_)).
	}
	
	Plan init normal [
		println(" --- [UM] initializing --- ");
		actorOp createGUI
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [UM] waiting notification --- ")
	] transition stopAfter 86400000
	  whenEvent register_request -> registration,
	  whenEvent login_request -> login
	  finally repeatPlan
	  
	Plan registration resumeLastPlan [
		println(" --- [UM] registration --- ");
		onEvent register_request : register_request(NICKNAME, TYPE) -> addRule registration(NICKNAME, TYPE);
		[!? alreadyRegistered] actorOp print("This user name is already used. Choose another one!");
		[!? alreadyRegistered] removeRule registration(_,_);
		[!? correct_registration] actorOp print("Registration complete!")		
	]
	
	Plan login resumeLastPlan [
		println(" --- [UM] login --- ");
		onEvent login_request : login_request(NICKNAME,TYPE,NAME) -> addRule login(NICKNAME,TYPE,NAME);
		[!? can_login(NICKNAME,NAME)] forward NAME -m login_response : login_response(NICKNAME,"Login ok");
		[?? login(NICKNAME,_,NAME)] forward NAME -m login_response : login_response(NICKNAME,"Login failed")
		
	]
	
}

QActor qmanager_patients_name context ctx_manager {
	
	Rules {
		
		doc_name(NAME) :- doc_name_id(ACTORNAME,DOCID),
							text_term(I,DOCID),
							text_concat(ACTORNAME,I,NAME),!.
									       
		req_id_doc_name(ID,NAME) :- nickname(NICKNAME), patient(ID,NICKNAME), doc_name(NAME) .
		
	}
	
	Plan init normal [
		println(" --- [MPN] initializing --- ")
	] switchTo waitRequest
	
	Plan waitRequest [
		println(" --- [MPN] waiting request --- ")
	] transition stopAfter 86400000
	  whenMsg register_nickname -> handleRequest,
	  whenMsg request_id -> handleReqId
	  finally repeatPlan
	  
	Plan handleRequest [
		println(" --- [MPN] handling request --- ");
		onMsg register_nickname : register_nickname(ID,NICKNAME) -> demo asserta(patient(ID,NICKNAME));
		[!? patient(ID,NICKNAME)] println(nicknameAndIDdelPazienteArrivatiAlManager(ID,NICKNAME))
	] switchTo waitRequest
	
	Plan handleReqId [
		println(" --- [MPN] handling requests for patient's id --- ");
		onMsg request_id : request_id(_,_, NICKNAME) -> addRule nickname(NICKNAME);
		onMsg request_id : request_id(ACTORNAME,DOCID, _) -> addRule doc_name_id(ACTORNAME,DOCID);
		[!? doc_name_id(ACTORNAME,DOCID)] println (dooooooooooooooooooccccccccccccccciddddddddddd(DOCID));
		[!? doc_name_id(ACTORNAME,DOCID)] println (doooooooooooooooooocccccccccccccccnameeeeeeeeee(ACTORNAME));
		[!? req_id_doc_name(ID,NAME)] println(nomeattoreacuiinvioooooooooooooooooooooooooooo(NAME));
		[!? req_id_doc_name(ID,NAME)] println(idddddddddddddddddddddddddddddddddddddd(ID));
		[!? req_id_doc_name(ID,NAME)] sendto NAME in ctx_doctor -m request_id_response : request_id_response(ID);  
		removeRule doc_name_id(_,DOCID);
		removeRule nickname(NICKNAME)
	] switchTo waitRequest
}

QActor qmanager_associations context ctx_manager {
	
	Rules {
		//association(DOCID,PATID)
		association(2,1).
		association(2,2).
		
		get_associations(LIST) :- patient(PATID),findall(doc(X), association(PATID,X),LIST), retract(patient(PATID)),!.
		
		check_association("ok") :- check(DOCID,PATID), association(DOCID,PATID),!.
		check_association("no").
		
	}
	
	Plan init normal [
		println(" --- [MA] initializing --- ")	
	] switchTo waitingRequest
	
	Plan waitingRequest [
		println(" --- [MA] waiting request --- ")
	] transition stopAfter 86400000
	  whenMsg association -> handleRequest,
	  whenMsg check_association -> checkAssociation
	  finally repeatPlan
	  
	Plan handleRequest resumeLastPlan [
		println(" --- [MA] handling request --- ");
		onMsg association : association(PATID) -> addRule patient(PATID);
		actorOp memoCurrentCaller;
		[!? get_associations(LIST)] replyToCaller -m association_response : association_response(LIST)
	]
	
	Plan checkAssociation resumeLastPlan [
		println(" --- [MA] chacking association --- ");
		onMsg check_association : check_association(DOCID,PATID) -> addRule check(DOCID,PATID);
		actorOp memoCurrentCaller;
		[!? check_association(RESP)] replyToCaller -m check_association_response : check_association_response(RESP);
		removeRule check(DOCID,PATID)
	]

}

QActor qdoctor_login context ctx_doctor {
	
	Rules {
		myNewName(Prot,Name,N1) :-
			value(nameCounter,N1),
			text_term(N1S,N1), 
			text_term(ProtS,Prot),
 			text_concat(ProtS,N1S,Name),
			replaceRule(instance(_,_,_),
			instance(Prot,N1,Name)).
	}
	
	Plan init normal [
		println(" --- [DL] initializing --- ");
		actorOp createGUI	
	] switchTo waitResponse
	
	Plan waitResponse [
		println(" --- [DL] waiting response --- ")
	] transition stopAfter 86400000
	  whenMsg login_response -> loginResponse
	  finally repeatPlan
	  
	Plan loginResponse [
		println(" --- [DL] login response --- ");
		removeRule login(_);
		onMsg login_response : login_response(NICKNAME,DESCRIPTION) -> addRule login(DESCRIPTION);
		[!? login(DESCRIPTION)] actorOp print(DESCRIPTION);
		[?? login("Login ok")] switchTo createActors
	] switchTo waitResponse
	
	Plan createActors [
		[!? newName(qdoctor_data_retriever, Name, N)] demo createActor(Name, 'it.unibo.qdoctor_data_retriever.Qdoctor_data_retriever');
		[!? myNewName(qdoctor_notification_receiver, Name, N)] demo createActor(Name, 'it.unibo.qdoctor_notification_receiver.Qdoctor_notification_receiver');
		[!? myNewName(qdoctor_notification_sender, Name, N)] demo createActor(Name, 'it.unibo.qdoctor_notification_sender.Qdoctor_notification_sender')
	] switchTo waitResponse
}

QActor qdoctor_data_retriever context ctx_doctor_model {
	
	Rules{
		//check_myid(DOCID) :- myID(DOCID), received(ID,PATNICKNAME), check(DOCID,ID).
		//check(I,I).
		
		my_id_and_patient_id(DOCID,PATID) :- myID(DOCID), my_patient(PATID).
		
		my_id_and_pat_nickname(DOCID,PATNICKNAME) :- myID(DOCID), pat_nickname(PATNICKNAME), retract(pat_nickname(_)).
		
		check_and_get_name(NAME) :- check_myid(_,_),
							        get_name(NAME).
							        
		get_name(NAME) :- myID(ID),
						  text_term(I,ID),
						  text_concat('qdoctor_data_retriever',I,NAME), !.		        
							       
		check_not_equal(NAME) :-  myID(ID), received(I),eval(lt,I,ID),get_name(NAME).
		check_not_equal(NAME) :-  myID(ID), received(I),eval(gt,I,ID),get_name(NAME).
	}
	/*
	Plan waitLogin normal[
		println(" --- [D] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_login -> init
	  finally repeatPlan
	*/  
	Plan init normal [
		println(" --- [D] initializing --- ");
		actorOp createGUI;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] addRule myID(R);
		[!? myID(R)] actorOp print(id(R))
	] switchTo waitUserRequest
	
	Plan waitUserRequest [
		actorOp print(" --- [D] waiting for user request --- ")
	] transition stopAfter 86400000
	  whenMsg doctor_data_request_gui -> requestPatientId
	  finally repeatPlan
	
	Plan requestPatientId [
		//delay 3000;
		actorOp print(" --- [D] requesting patient id --- ");
		onMsg doctor_data_request_gui : doctor_data_request_gui(PATNICKNAME) -> addRule pat_nickname(PATNICKNAME);
		[!? pat_nickname(PATNICKNAME)] actorOp print(nicknamePazienteDiCuiVoglioSapereLID(PATNICKNAME));
		[!? my_id_and_pat_nickname(DOCID,PATNICKNAME)] forward qmanager_patients_name -m request_id : request_id('qdoctor_data_retriever',DOCID,PATNICKNAME)
	] switchTo waitAssociation
	
	Plan waitAssociation [
		actorOp print(" --- [D] waiting patient id--- ")
	] transition stopAfter 30000
	  whenMsg request_id_response -> requestData
	  finally repeatPlan
	  
	Plan requestData [
		actorOp print(" --- [D] requesting data --- ");
		onMsg request_id_response : request_id_response(ID)-> addRule my_patient(ID);
		[!? my_id_and_patient_id(DOCID,PATID)] actorOp print(ritornomioidepationtid(DOCID,PATID));
		[!? my_id_and_patient_id(DOCID,PATID)] forward qdc_data_receiver -m patient_parameters_request_from_doctor : patient_parameters_request_from_doctor(DOCID,PATID);
		removeRule my_patient(ID)
	] switchTo waitResponse
	
	Plan waitResponse resumeLastPlan [
		actorOp print(" --- [D] waiting for a response --- ")
	] transition stopAfter 60000
	  whenMsg patient_parameters_response -> visualiseData,
	  whenMsg failure -> handleError
	  
	Plan visualiseData [
		actorOp print(" --- [D] visualizing data --- ");
		onMsg patient_parameters_response : patient_parameters_response(LIST) -> actorOp print(LIST)
	] switchTo waitUserRequest
	  
	Plan handleError [
		actorOp print(" --- [D] ERROR: Unauthorized data request --- ")
	] switchTo waitUserRequest
	
}

QActor qdoctor_notification_receiver context ctx_doctor_model {
	/*
	Plan waitLogin normal[
		println(" --- [DNR] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_login -> init
	  finally repeatPlan
	*/  
	Plan init normal [
		println(" --- [DNR] initializing --- ");
		actorOp createGUI
	] switchTo waitNotification
	
	Plan waitNotification [
		actorOp print(" --- [DNR] waiting notification --- ")
	] transition stopAfter 86400000
	  whenMsg notification -> receiveNotification
	  finally repeatPlan
	  
	Plan receiveNotification resumeLastPlan [
		actorOp print(" --- [DNR] receive notification --- ");
		onMsg notification : notification(ID, DESCRIPTION) -> actorOp print(DESCRIPTION)
	]
	
}

QActor qdoctor_notification_sender context ctx_doctor_model {
	
	Rules {
		
		my_id_and_pat_nickname(DOCID,PATNICKNAME) :- myID(DOCID), pat_nickname(PATNICKNAME).
		
		advice(ID,NICKNAME,NOTIFICATION) :- pat_id(ID), pat_nickname(NICKNAME), notification(NOTIFICATION), retract(pat_nickname(NICKNAME)), retract(notification(NOTIFICATION)), retract(pat_id(ID)).
	}
	/*
	Plan waitLogin normal[
		println(" --- [DNS] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_login -> init
	  finally repeatPlan
	*/
	Plan init  normal [
		println(" --- [DNS] initializing --- ");
		actorOp createGUI;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] addRule myID(R)
	] switchTo waitInput
	
	Plan waitInput [
		println(" --- [DNS] waiting input --- ")
	] transition stopAfter 86400000
	  whenMsg doctor_notification_sender_gui -> saveNickname
	  finally repeatPlan
	  
	Plan saveNickname [
		println(" --- [DNS] saving nickname --- ");
		onMsg doctor_notification_sender_gui : doctor_notification_sender_gui(NICKNAME) -> addRule pat_nickname(NICKNAME)
	] transition stopAfter 86400000
	  whenMsg doctor_notification_sender_gui -> requestId
	  finally repeatPlan
	  	
	Plan requestId [
		println(" --- [DNS] requesting id --- ");
		onMsg doctor_notification_sender_gui : doctor_notification_sender_gui(NOTIFICATION) -> addRule notification(NOTIFICATION);
		[!? my_id_and_pat_nickname(DOCID,PATNICKNAME)] forward qmanager_patients_name -m request_id : request_id('qdoctor_notification_sender',DOCID,PATNICKNAME)
	] switchTo waitAssociation
	
	Plan waitAssociation [
		actorOp print(" --- [DNS] waiting patient id--- ")
	] transition stopAfter 30000
	  whenMsg request_id_response -> sendNotification
	  finally repeatPlan
	  
	Plan sendNotification [
		println(" --- [DNS] sending notification --- ");
		onMsg request_id_response : request_id_response(ID) -> addRule pat_id(ID);
		[!? advice(DOCID,NICKNAME,NOTIFICATION)] forward qdc_notification_manager -m advice : advice(DOCID,NICKNAME,NOTIFICATION);
		actorOp print("advice sent to the patient")
	] switchTo waitInput
	
}

