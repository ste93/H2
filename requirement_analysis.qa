System h2

Dispatch sending_patient_parameter : sending_patient_parameter(ID,PARAMETER,TIMESTAMP)
Dispatch patient_parameters_request : patient_parameters_request(ID)
Dispatch patient_parameters_request_from_doctor : patient_parameters_request_from_doctor(DOCID,PATID)
Dispatch patient_parameters_response : patient_parameters_response(LIST)
Dispatch notification : notification(DESCRIPTION)
Dispatch login_response : login_response(DESCRIPTION)
Dispatch success : success
Dispatch failure : failure
Event    patient_data_request : patient_data_request(ID)
Event    doctor_data_request : doctor_data_request(ID)
Event    doctor_notification_sender : doctor_notification_sender(NOTIFICATION)
Event    register_request : register_request(NICKNAME,TYPE)
Event    login_request : login_request(NICKNAME,TYPE,NAME)
Event    patient_login : patient_login
Event    doctor_login : doctor_login


//requirements: business 1,2,3,4,5,6,7 e functional 1,2,3,4,5,6,7
Context ctx_data_centre 	ip[host="localhost" port=8070] //-g cyan
Context ctx_patient_login 	ip[host="localhost" port=1278] //-g green
Context ctx_patient 		ip[host="localhost" port=1234] //-g green
Context ctx_doctor_login  	ip[host="localhost" port=3478] //-g white
Context ctx_doctor  		ip[host="localhost" port=3456] //-g white
Context ctx_create_actors  	ip[host="localhost" port=4678] //-g white

EventHandler evh for patient_data_request, doctor_data_request, doctor_notification_sender, register_request, login_request -print;

QActor qpatient_login context ctx_patient_login {
	
	Rules {
		myNewName(Prot,Name,N1) :-
			value(nameCounter,N1),
			text_term(N1S,N1), 
			text_term(ProtS,Prot),
 			text_concat(ProtS,N1S,Name),
			replaceRule(instance(_,_,_),
			instance(Prot,N1,Name)).
	}
	
	Plan init normal [
		println(" --- [PL] initializing --- ");
		actorOp createGUI	
	] switchTo waitResponse
	
	Plan waitResponse [
		println(" --- [PL] waiting response --- ")
	] transition stopAfter 86400000
	  whenMsg login_response -> loginResponse
	  finally repeatPlan
	  
	Plan loginResponse [
		println(" --- [PL] login response --- ");
		removeRule login(_);
		onMsg login_response : login_response(DESCRIPTION) -> addRule login(DESCRIPTION);
		[!? login(DESCRIPTION)] actorOp print(DESCRIPTION);
		[?? login("Login ok")] switchTo createActors
	] switchTo waitResponse
	
	Plan createActors [
		[!? newName(qpatient_sender, Name, N)] demo createActor(Name, 'it.unibo.qpatient_sender.Qpatient_sender');
		[!? myNewName(qpatient_data_retriever, Name, N)] demo createActor(Name, 'it.unibo.qpatient_data_retriever.Qpatient_data_retriever');
		[!? myNewName(qpatient_notification_receiver, Name, N)] demo createActor(Name, 'it.unibo.qpatient_notification_receiver.Qpatient_notification_receiver')
	] switchTo waitResponse
}

QActor qpatient_sender context ctx_patient {
	/*
	Plan init normal [
		println(" --- [PS] initializing --- ")	
	] switchTo waitLogin
	*/
	Plan init normal[
		println(" --- [PS] initializing --- ")
	] switchTo sendData
	
	Plan sendData [
		println(" --- [PS] sending data --- ");
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(R,37,"12/12/12");
		delay 2500;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(R,38,"12/12/12");
		delay 2500;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(R,39,"12/12/12");
		delay 2500
	] finally repeatPlan
	
}

QActor qpatient_data_retriever context ctx_patient {
	
	Rules{
		check_myid(ID) :- myID(ID), received(I), check(ID,I).
		check(I,I).
		
		check_and_get_name(NAME) :- check_myid(_),
							        get_name(NAME).
							        
		get_name(NAME) :- myID(ID),
						  text_term(I,ID),
						  text_concat('qpatient_data_retriever',I,NAME), !.		        
							       
		check_not_equal(NAME) :-  myID(ID), received(I),eval(lt,I,ID),get_name(NAME).
		check_not_equal(NAME) :-  myID(ID), received(I),eval(gt,I,ID),get_name(NAME).
	}
	/*
	Plan waitLogin normal[
		println(" --- [PR] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent patient_login -> init
	  finally repeatPlan
	*/  
	Plan init normal [
		actorOp print(" --- [PR] initializing --- ");
		actorOp createGUI;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] addRule myID(R)
		//[!? myID(ID)] actorOp print(primo(ID))
	] switchTo waitUserRequest
	  
	Plan waitUserRequest [
		actorOp print(" --- [PR] waiting for user request --- ")
	] transition stopAfter 86400000
	  whenEvent patient_data_request -> requestData
	  finally repeatPlan
	
	Plan requestData [
		actorOp print(" --- [PR] requesting data --- ");
		onEvent patient_data_request : patient_data_request(I) -> addRule received(I);
		//[!? received(ID)] actorOp print(secondo(ID));
		//printCurrentEvent;
		//[!? check_myid(ID)] actorOp print(ciao(ID));
		[!? check_myid(ID)] forward qdc_data_receiver -m patient_parameters_request : patient_parameters_request(ID); 
		[!? check_and_get_name(NAME)] forward NAME -m success : success; 
		[!? check_not_equal(NAME)] forward NAME -m failure : failure;
		removeRule received(I)
	] transition stopAfter 30000
	  whenMsg success -> waitResponse,
	  whenMsg failure -> waitUserRequest
	  finally repeatPlan
	
	Plan waitResponse resumeLastPlan [
		actorOp print(" --- [PR] waiting for a response --- ")
	] transition stopAfter 600000
	  whenMsg patient_parameters_response -> visualiseData
	  
	Plan visualiseData [
		actorOp print(" --- [PR] visualizing data --- ");
		onMsg patient_parameters_response : patient_parameters_response(LIST) -> actorOp print(LIST)
	] switchTo waitUserRequest
}

QActor qpatient_notification_receiver context ctx_patient {
	/*
	Plan waitLogin normal[
		println(" --- [PNR] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent patient_login -> init
	  finally repeatPlan
	*/  
	Plan init normal [
		println(" --- [PNR] initializing --- ");
		actorOp createGUI
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [PNR] waiting notification --- ")
	] transition stopAfter 86400000
	  whenMsg notification -> visualizeNotification
	  finally repeatPlan
	  
	Plan visualizeNotification resumeLastPlan [
		println(" --- [PNR] receive notification --- ");
		onMsg notification : notification(DESCRIPTION) -> actorOp print(DESCRIPTION)
	]
	
}

QActor qdc_data_receiver context ctx_data_centre  {
	
	Rules {
		request_parameters(A,NAME,LIST) :- patient_id(ID),
									       text_term(I,ID),
									       text_concat(A,I,NAME),
									       findall(patient_parameter(ID,X,Y), patient_parameter(ID,X,Y),LIST),
									       retract(patient_id(ID)),!.
									   
		request_parameters_from_doc(A,NAME,LIST) :- doc_and_pat_id(DOCID,PATID),
									                text_term(I,DOCID),
									                text_concat(A,I,NAME),
									                findall(patient_parameter(PATID,X,Y), patient_parameter(PATID,X,Y),LIST),
									                retract(doc_and_pat_id(DOCID,PATID)),!.							  
	}
	
	Plan init normal [
		println(" --- [DC] initializing --- ")	
	] switchTo waitMessages
	
	Plan waitMessages [
		println(" --- [DC] waiting messages --- ")
	] transition stopAfter 86400000
	  whenMsg sending_patient_parameter -> saveParameter,
	  whenMsg patient_parameters_request -> handleRequest,
	  whenMsg patient_parameters_request_from_doctor -> handleDoctorRequest
	  finally repeatPlan
	  
	Plan saveParameter [
		println(" --- [DC] saving parameters --- ");
		onMsg sending_patient_parameter : sending_patient_parameter(ID,PARAMETER,TIMESTAMP) -> demo asserta(patient_parameter(ID,PARAMETER,TIMESTAMP))
	] switchTo sendToAnalyser
	
	Plan sendToAnalyser [
		println(" --- [DC] sending to analyzer --- ");
		[!? patient_parameter(PARAMETER, TIMESTAMP)] forward qdc_analyser -m sending_patient_parameter : sending_patient_parameter(PARAMETER, TIMESTAMP) 
	] switchTo waitMessages
	
	Plan handleRequest resumeLastPlan [
		println(" --- [DC] handling parameters request --- ");
		//printCurrentMessage;
		onMsg patient_parameters_request : patient_parameters_request(ID) -> demo asserta(patient_id(ID));
		//actorOp memoCurrentCaller;
		//[!? patient_id(ID)] println(ID); 
		[!? request_parameters('qpatient_data_retriever',NAME,LIST)] sendto NAME in ctx_patient_login -m patient_parameters_response : patient_parameters_response(LIST)		
	]
	
	Plan handleDoctorRequest resumeLastPlan [
		println(" --- [DC] handling parameters request from doctor --- ");
		onMsg patient_parameters_request_from_doctor : patient_parameters_request_from_doctor(DOCID,PATID) -> demo asserta(doc_and_pat_id(DOCID,PATID));
		//actorOp memoCurrentCaller;
		//[!? patient_id(ID)] println(ID); 
		[!? request_parameters_from_doc('qdoctor_data_retriever',NAME,LIST)] sendto NAME in ctx_doctor_login -m patient_parameters_response : patient_parameters_response(LIST)		
	]
	
}

QActor qdc_analyser context ctx_data_centre {
	
	Rules {
		analyser(VAL, febbre) :- eval(gt, VAL, 37),!.
		analyser(VAL, non_febbre) :- eval(gt, 37, VAL), !.
		analyser(37, non_febbre).
		
		analyse(RESP) :- 
			parameter(PARAMETER),
			analyser(PARAMETER, RESP).
	}
	
	Plan init normal [
		println(" --- [A] initializing --- ")	
	] switchTo waitParameter
	
	Plan waitParameter [
		println(" --- [A] waiting parameter--- ")
	] transition stopAfter 86400000
	  whenMsg sending_patient_parameter -> analyse
	  finally repeatPlan
	  
	Plan analyse resumeLastPlan [
		println(" --- [A] analyzing parameter--- ");
		onMsg sending_patient_parameter : sending_patient_parameter(PARAMETER, TIMESTAMP) -> addRule parameter(PARAMETER);
		[!? analyse(RESP)] println(RESP);
		[!? analyse(RESP)] forward qdc_notification_manager -m notification : notification(RESP);	
		[!? analyse(RESP)] removeRule parameter(PARAMETER)
	]
	
}

QActor qdc_notification_manager context ctx_data_centre {
	
	Rules {
		send_to_doctor(febbre) :- notification(febbre).
	}
	
	Plan init normal [
		println(" --- [NM] initializing --- ")	
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [NM] waiting notification --- ")
	] transition stopAfter 86400000
	  whenMsg notification -> sendNotification
	  finally repeatPlan
	  
	Plan sendNotification resumeLastPlan [
		println(" --- [NM] sending notification --- ");
		onMsg notification : notification(DESCRIPTION) -> addRule notification(DESCRIPTION); 
		[!? send_to_doctor(DESCRIPTION)] forward qdoctor_notification_receiver -m notification : notification(DESCRIPTION);
		[?? notification(DESCRIPTION)] forward qpatient_notification_receiver -m notification : notification(DESCRIPTION)			
	]
	
}

QActor qdc_user_manager context ctx_data_centre {
	
	Rules {
		alreadyRegistered :- registration(NICKNAME, _), registered(NICKNAME,_).
		
		correct_registration :- registration(NICKNAME,TYPE), assert(registered(NICKNAME,TYPE)), retract(registration(_,_)).
		
		can_login(NAME) :- login(NICKNAME,TYPE,NAME), registered(NICKNAME,TYPE), retract(login(_,_,_)).
	}
	
	Plan init normal [
		println(" --- [UM] initializing --- ");
		actorOp createGUI
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [UM] waiting notification --- ")
	] transition stopAfter 86400000
	  whenEvent register_request -> registration,
	  whenEvent login_request -> login
	  finally repeatPlan
	  
	Plan registration resumeLastPlan [
		println(" --- [UM] registration --- ");
		onEvent register_request : register_request(NICKNAME, TYPE) -> addRule registration(NICKNAME, TYPE);
		[!? alreadyRegistered] actorOp print("This user name is already used. Choose another one!");
		[!? alreadyRegistered] removeRule registration(_,_);
		[!? correct_registration] actorOp print("Registration complete!")		
	]
	
	Plan login resumeLastPlan [
		println(" --- [UM] login --- ");
		onEvent login_request : login_request(NICKNAME,TYPE,NAME) -> addRule login(NICKNAME,TYPE,NAME);
		[!? can_login(NAME)] forward NAME -m login_response : login_response("Login ok");
		[?? login(_,_,NAME)] forward NAME -m login_response : login_response("Login failed")
		
	]
	
}

QActor qdoctor_login context ctx_doctor_login {
	
	Rules {
		myNewName(Prot,Name,N1) :-
			value(nameCounter,N1),
			text_term(N1S,N1), 
			text_term(ProtS,Prot),
 			text_concat(ProtS,N1S,Name),
			replaceRule(instance(_,_,_),
			instance(Prot,N1,Name)).
	}
	
	Plan init normal [
		println(" --- [DL] initializing --- ");
		actorOp createGUI	
	] switchTo waitResponse
	
	Plan waitResponse [
		println(" --- [DL] waiting response --- ")
	] transition stopAfter 120000
	  whenMsg login_response -> loginResponse
	  finally repeatPlan
	  
	Plan loginResponse [
		println(" --- [DL] login response --- ");
		removeRule login(_);
		onMsg login_response : login_response(DESCRIPTION) -> addRule login(DESCRIPTION);
		[!? login(DESCRIPTION)] actorOp print(DESCRIPTION);
		[?? login("Login ok")] switchTo createActors
	] switchTo waitResponse
	
	Plan createActors [
		[!? newName(qdoctor_data_retriever, Name, N)] demo createActor(Name, 'it.unibo.qdoctor_data_retriever.Qdoctor_data_retriever');
		[!? myNewName(qdoctor_notification_receiver, Name, N)] demo createActor(Name, 'it.unibo.qdoctor_notification_receiver.Qdoctor_notification_receiver');
		[!? myNewName(qdoctor_notification_sender, Name, N)] demo createActor(Name, 'it.unibo.qdoctor_notification_sender.Qdoctor_notification_sender')
	] switchTo waitResponse
}

QActor qdoctor_data_retriever context ctx_doctor {
	
	Rules{
		my_patient(2).
		
		check_myid(DOCID,PATID) :- myID(DOCID), received(I), check(DOCID,I), my_patient(PATID).
		check(I,I).
		
		check_and_get_name(NAME) :- check_myid(_,_),
							        get_name(NAME).
							        
		get_name(NAME) :- myID(ID),
						  text_term(I,ID),
						  text_concat('qdoctor_data_retriever',I,NAME), !.		        
							       
		check_not_equal(NAME) :-  myID(ID), received(I),eval(lt,I,ID),get_name(NAME).
		check_not_equal(NAME) :-  myID(ID), received(I),eval(gt,I,ID),get_name(NAME).
	}
	/*
	Plan waitLogin normal[
		println(" --- [D] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_login -> init
	  finally repeatPlan
	*/  
	Plan init normal [
		println(" --- [D] initializing --- ");
		actorOp createGUI;
		[!? actorobj(ID)] actorOp getId(ID);
		[?? actorOpDone(OP,R)] addRule myID(R);
		[!? myID(R)] actorOp print(id(R))
	] switchTo waitUserRequest
	  
	Plan waitUserRequest [
		actorOp print(" --- [D] waiting for user request --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_data_request -> requestData
	  finally repeatPlan
	
	Plan requestData [
		//delay 3000;
		actorOp print(" --- [D] requesting data --- ");
		onEvent doctor_data_request : doctor_data_request(I) -> addRule received(I);
		[!? received(ID)] actorOp print(idricevuto(ID));
		printCurrentEvent;
		[!? check_myid(DOCID,PATID)] actorOp print(ritornomioidepationtid(DOCID,PATID));
		[!? check_myid(DOCID,PATID)] forward qdc_data_receiver -m patient_parameters_request_from_doctor : patient_parameters_request_from_doctor(DOCID,PATID); 
		[!? check_and_get_name(NAME)] forward NAME -m success : success; 
		[!? check_not_equal(NAME)] forward NAME -m failure : failure;
		removeRule received(I)
	] transition stopAfter 30000
	  whenMsg success -> waitResponse,
	  whenMsg failure -> waitUserRequest
	  finally repeatPlan
	
	Plan waitResponse resumeLastPlan [
		actorOp print(" --- [D] waiting for a response --- ")
	] transition stopAfter 60000
	  whenMsg patient_parameters_response -> visualiseData
	  
	Plan visualiseData [
		actorOp print(" --- [D] visualizing data --- ");
		onMsg patient_parameters_response : patient_parameters_response(LIST) -> actorOp print(LIST)
	] switchTo waitUserRequest
	
}

QActor qdoctor_notification_receiver context ctx_doctor {
	/*
	Plan waitLogin normal[
		println(" --- [DNR] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_login -> init
	  finally repeatPlan
	*/  
	Plan init normal [
		println(" --- [DNR] initializing --- ");
		actorOp createGUI
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [DNR] waiting notification --- ")
	] transition stopAfter 86400000
	  whenMsg notification -> receiveNotification
	  finally repeatPlan
	  
	Plan receiveNotification resumeLastPlan [
		println(" --- [DNR] receive notification --- ");
		onMsg notification : notification(DESCRIPTION) -> actorOp print(DESCRIPTION)
	]
	
}

QActor qdoctor_notification_sender context ctx_doctor {
	/*
	Plan waitLogin normal[
		println(" --- [DNS] waiting login --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_login -> init
	  finally repeatPlan
	*/
	Plan init  normal [
		println(" --- [DNS] initializing --- ");
		actorOp createGUI	
	] switchTo waitInput
	
	Plan waitInput [
		println(" --- [DNS] waiting input --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_notification_sender -> sendNotification
	  finally repeatPlan
	
	Plan sendNotification [
		println(" --- [DNS] sending notification --- ");
		onEvent doctor_notification_sender : doctor_notification_sender(NOTIFICATION) -> forward qpatient_notification_receiver -m notification : notification(NOTIFICATION);
		actorOp print("advice sent to the patient")
		//delay 60000
	] switchTo waitInput
	
}

QActor qcreate_actors context ctx_create_actors {
	
	Plan init normal [
		println(" --- [CA] initializing --- ")
	] switchTo createActors
	
	Plan createActors [
		println(" --- [CA] creating actors --- ");
		[!? newName(qpatient_data_retriver, Name, N)] demo createActor(Name, 'it.unibo.qpatient_data_retriever.Qpatient_data_retriever')
	] finally repeatPlan 10
	
}

