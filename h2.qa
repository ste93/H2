System qHealtHelp
/*
//DATA_TYPE is the type of parameter measured by sensor (e.g. temperature)
//UOM is Unity of Measurement
//PARAMETER is the numeric value registered by the sensor
Event local_sensordata : local_sensordata(PARAMETER, DATA_TYPE, UOM, TIMESTAMP)
Dispatch patientsData_msg : patientsData(USER_ID, PARAMETER, DATA_TYPE, UOM, TIMESTAMP)
Dispatch patientHistoryRequest : patientHistoryRequest(USER_ID)
Dispatch patientHistoryResponse : patientHistoryResponse(LIST)
Dispatch doctorHistoryRequest : doctorHistoryRequest(USER_ID)
Dispatch doctorHistoryResponse : doctorHistoryResponse(LIST)
Dispatch analysisRequest : analysisRequest(USER_ID, PARAMETER, DATA_TYPE, UOM)
Dispatch analysisResponse : analysisResponse(USER_ID, DESCRIPTION)

Context ctx_folder ip[host= "localhost" port=3456] -g yellow
Context ctx_patient ip[host= "localhost" port=44444] -standalone 
Context ctx_doctor ip[host= "localhost" port=1235] -standalone 

//this qactor is related to 2, 4, 5, 7, 8
QActor qfolder context ctx_folder {
	Rules {
		retrieve_message(USER_ID,LIST) :- 
			findall(parameter(PARAMETER, DATA_TYPE, UOM, TIMESTAMP), patient_parameter(USER_ID, PARAMETER, DATA_TYPE, UOM, TIMESTAMP), LIST),
			userID(USER_ID).
	}
	Plan init normal [
		println(" --- [F] Initialize folder --- ")
	] switchTo wait
	
	Plan wait [
		println(" --- [F] Waiting for messages --- ")
	] 
	
	transition stopAfter 86400000
	whenMsg patientsData_msg -> handleData,
	whenMsg patientHistoryRequest -> retrieveDataPatient,
	whenMsg doctorHistoryRequest -> retrieveDataDoctor
	finally repeatPlan
	
	Plan handleData resumeLastPlan [
		println (" --- [F] Received new data from patient --- ");
		onMsg patientsData_msg : patientsData(USER_ID, PARAMETER, DATA_TYPE, UOM, TIMESTAMP) -> demo asserta(patient_parameter(USER_ID, PARAMETER, DATA_TYPE, UOM, TIMESTAMP));    
		[!? patient_parameter(USER_ID, PARAMETER, DATA_TYPE, UOM, TIMESTAMP)] forward qanalyser -m analysisRequest : analysisRequest(USER_ID, PARAMETER, DATA_TYPE, UOM)
	] 
	
	Plan retrieveDataPatient resumeLastPlan [
		println (" --- [F] Requesting data for patient --- ");
		onMsg patientHistoryRequest : patientHistoryRequest(USER_ID) -> addRule userID(USER_ID);
		[!? retrieve_message(USER_ID,LIST)] sendto qpatient_history_retriever in ctx_patient -m patientHistoryResponse : patientHistoryResponse(LIST);
		[?? userID(USER_ID)] println(" --- [F] done ---")
	]

	Plan retrieveDataDoctor resumeLastPlan [
		println (" --- [F] Requesting data for doctor --- ");
		onMsg doctorHistoryRequest : doctorHistoryRequest(USER_ID) -> addRule userID(USER_ID);
		[!? retrieve_message(USER_ID,LIST)] sendto qdoctor_history_retriever in ctx_doctor -m doctorHistoryResponse : doctorHistoryResponse(LIST);
		[?? userID(USER_ID)] println(" --- [F] done ---")
	]
}

//this qactor is related to 3
QActor qanalyser context ctx_folder {
	Rules {
		analyser(VAL, temp, celsius, febbre) :- eval(gt, VAL, 37),!.
		analyser(VAL, temp, celsius, non_febbre) :- eval(gt, 37, VAL), !.
		analyser(37, temp, celsius, non_febbre).
		
		analyse(USER, RESP) :- 
			analyser(VALUE, DATA_TYPE, UOM, RESP), 
			analysisRequest(USER, VALUE, DATA_TYPE, UOM).		
	}
	Plan init normal [
		println(" --- [A] Initialise analyser --- ")
	] switchTo wait
	
	Plan wait [
		println(" --- [A] Waiting for messages --- ")
	] 
	transition stopAfter 86400000 
	whenMsg analysisRequest -> analyse 
	finally repeatPlan
	
	Plan analyse resumeLastPlan [
		onMsg analysisRequest : analysisRequest(USER_ID, PARAMETER, DATA_TYPE, UOM) -> addRule analysisRequest(USER_ID, PARAMETER, DATA_TYPE, UOM);
		[!? analyse(USER, RESP)] println(RESP);
		[??analysisRequest(USER_ID, PARAMETER, DATA_TYPE, UOM)] println(PARAMETER)
	]
}
*/