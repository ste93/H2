System h2

Dispatch sending_patient_parameter : sending_patient_parameter(PARAMETER, TIMESTAMP)
Dispatch patient_parameters_request : patient_parameters_request
Dispatch patient_parameters_response : patient_parameters_response(LIST)

//requisiti business 1,2 e funzionale 1,2
Context ctx_data_centre ip[host="localhost" port=8070] -g cyan
Context ctx_patient 	ip[host="localhost" port=1234] -g green
Context ctx_doctor  	ip[host="localhost" port=3456] -g white

QActor qpatient_sender context ctx_patient {
	
	Plan init normal [
		println(" --- [PS] initialising --- ")	
	] switchTo sendData
	
	Plan sendData [
		println(" --- [PS] sending data --- ");
		forward qdata_centre -m sending_patient_parameter : sending_patient_parameter(37, "12/12/12");
		delay 2500;
		forward qdata_centre -m sending_patient_parameter : sending_patient_parameter(38, "12/12/12");
		delay 2500;
		forward qdata_centre -m sending_patient_parameter : sending_patient_parameter(36, "12/12/12");
		delay 2500
	] finally repeatPlan
	
}

QActor qpatient_data_retriver context ctx_patient {
	
	Plan init normal [
		println(" --- [PR] initialising --- ")	
	] switchTo requestData
	
	Plan requestData [
		delay 3000;
		println(" --- [PR] requesting data --- ");
		forward qdata_centre -m patient_parameters_request : patient_parameters_request
	] switchTo waitResponse
	
	Plan waitResponse resumeLastPlan [
		println(" --- [PR] waiting for a response --- ")
	] transition stopAfter 60000
	  whenMsg patient_parameters_response -> visualiseData
	  
	Plan visualiseData [
		println(" --- [PR] visualizing data --- ");
		onMsg patient_parameters_response : patient_parameters_response(LIST) -> println(LIST)
	] switchTo requestData
}

QActor qdata_centre context ctx_data_centre {
	Rules {
		request_parameters(LIST) :- findall(patient_parameter(X,Y), patient_parameter(X, Y),LIST).
	}
	
	Plan init normal [
		println(" --- [DC] initialising --- ")	
	] switchTo waitParameter
	
	Plan waitParameter [
		println(" --- [DC] waiting messages --- ")
	] transition stopAfter 86400000
	  whenMsg sending_patient_parameter -> saveParameter,
	  whenMsg patient_parameters_request -> handleRequest
	  finally repeatPlan
	  
	Plan saveParameter resumeLastPlan [
		println(" --- [DC] saving parameters --- ");
		onMsg sending_patient_parameter : sending_patient_parameter(PARAMETER, TIMESTAMP) -> addRule patient_parameter(PARAMETER, TIMESTAMP)
	]
	
	Plan handleRequest resumeLastPlan [
		println(" --- [DC] handling parameters request --- ");
		onMsg patient_parameters_request : patient_parameters_request -> actorOp memoCurrentCaller;
		[!? request_parameters(LIST)] replyToCaller -m patient_parameters_response : patient_parameters_response(LIST)		
	]
	
}

QActor qdoctor_data_retriver context ctx_doctor {
	
	Plan init normal [
		println(" --- [D] initialising --- ")	
	] switchTo requestData
	
	Plan requestData [
		delay 3000;
		println(" --- [D] requesting data --- ");
		forward qdata_centre -m patient_parameters_request : patient_parameters_request
	] switchTo waitResponse
	
	Plan waitResponse resumeLastPlan [
		println(" --- [D] waiting for a response --- ")
	] transition stopAfter 60000
	  whenMsg patient_parameters_response -> visualiseData
	  
	Plan visualiseData [
		println(" --- [D] visualizing data --- ");
		onMsg patient_parameters_response : patient_parameters_response(LIST) -> println(LIST)
	] switchTo requestData
	
}

