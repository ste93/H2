System h2

Dispatch sending_patient_parameter : sending_patient_parameter(PARAMETER, TIMESTAMP)
Dispatch patient_parameters_request : patient_parameters_request
Dispatch patient_parameters_response : patient_parameters_response(LIST)
Dispatch notification : notification(DESCRIPTION)
Event    patient_data_request : patient_data_request
Event    doctor_data_request : doctor_data_request
Event    doctor_notification_sender : doctor_notification_sender(NOTIFICATION)


//requirements: business 1,2,3,4 e functional 1,2,3,4,5
Context ctx_data_centre ip[host="localhost" port=8070] -g cyan
Context ctx_patient 	ip[host="localhost" port=1234] //-g green
Context ctx_doctor  	ip[host="localhost" port=3456] //-g white

EventHandler evh for patient_data_request, doctor_data_request, doctor_notification_sender -print;

QActor qpatient_sender context ctx_patient {
	
	Plan init normal [
		println(" --- [PS] initializing --- ")	
	] switchTo sendData
	
	Plan sendData [
		println(" --- [PS] sending data --- ");
		forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(37, "12/12/12");
		delay 2500;
		forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(38, "12/12/12");
		delay 2500;
		forward qdc_data_receiver -m sending_patient_parameter : sending_patient_parameter(36, "12/12/12");
		delay 2500
	] finally repeatPlan
	
}

QActor qpatient_data_retriever context ctx_patient {
	
	Plan init normal [
		println(" --- [PR] initializing --- ");
		actorOp createGUI
	] switchTo waitUserRequest
	  
	Plan waitUserRequest [
		println(" --- [PR] waiting for user request --- ")
	] transition stopAfter 86400000
	  whenEvent patient_data_request -> requestData
	  finally repeatPlan
	
	Plan requestData [
		println(" --- [PR] requesting data --- ");
		//delay 3000;
		forward qdc_data_receiver -m patient_parameters_request : patient_parameters_request
	] switchTo waitResponse
	
	Plan waitResponse resumeLastPlan [
		println(" --- [PR] waiting for a response --- ")
	] transition stopAfter 600000
	  whenMsg patient_parameters_response -> visualiseData
	  
	Plan visualiseData [
		println(" --- [PR] visualizing data --- ");
		onMsg patient_parameters_response : patient_parameters_response(LIST) -> actorOp print(LIST)
	] switchTo waitUserRequest
}

QActor qpatient_notification_receiver context ctx_patient {
	
	Plan init normal [
		println(" --- [PNR] initializing --- ")	
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [PNR] waiting notification --- ")
	] transition stopAfter 86400000
	  whenMsg notification -> visualizeNotification
	  finally repeatPlan
	  
	Plan visualizeNotification resumeLastPlan [
		println(" --- [PNR] receive notification --- ");
		onMsg notification : notification(DESCRIPTION) -> println(DESCRIPTION)
	]
	
}

QActor qdc_data_receiver context ctx_data_centre {
	
	Rules {
		request_parameters(LIST) :- findall(patient_parameter(X,Y), patient_parameter(X, Y),LIST).
	}
	
	Plan init normal [
		println(" --- [DC] initializing --- ")	
	] switchTo waitMessages
	
	Plan waitMessages [
		println(" --- [DC] waiting messages --- ")
	] transition stopAfter 86400000
	  whenMsg sending_patient_parameter -> saveParameter,
	  whenMsg patient_parameters_request -> handleRequest
	  finally repeatPlan
	  
	Plan saveParameter [
		println(" --- [DC] saving parameters --- ");
		onMsg sending_patient_parameter : sending_patient_parameter(PARAMETER, TIMESTAMP) -> demo asserta(patient_parameter(PARAMETER, TIMESTAMP))
	] switchTo sendToAnalyser
	
	Plan sendToAnalyser [
		println(" --- [DC] sending to analyzer --- ");
		[!? patient_parameter(PARAMETER, TIMESTAMP)] forward qdc_analyser -m sending_patient_parameter : sending_patient_parameter(PARAMETER, TIMESTAMP) 
	] switchTo waitMessages
	
	Plan handleRequest resumeLastPlan [
		println(" --- [DC] handling parameters request --- ");
		onMsg patient_parameters_request : patient_parameters_request -> actorOp memoCurrentCaller;
		[!? request_parameters(LIST)] replyToCaller -m patient_parameters_response : patient_parameters_response(LIST)		
	]
	
}

QActor qdc_analyser context ctx_data_centre {
	
	Rules {
		analyser(VAL, febbre) :- eval(gt, VAL, 37),!.
		analyser(VAL, non_febbre) :- eval(gt, 37, VAL), !.
		analyser(37, non_febbre).
		
		analyse(RESP) :- 
			parameter(PARAMETER),
			analyser(PARAMETER, RESP).
	}
	
	Plan init normal [
		println(" --- [A] initializing --- ")	
	] switchTo waitParameter
	
	Plan waitParameter [
		println(" --- [A] waiting parameter--- ")
	] transition stopAfter 86400000
	  whenMsg sending_patient_parameter -> analyse
	  finally repeatPlan
	  
	Plan analyse resumeLastPlan [
		println(" --- [A] analyzing parameter--- ");
		onMsg sending_patient_parameter : sending_patient_parameter(PARAMETER, TIMESTAMP) -> addRule parameter(PARAMETER);
		[!? analyse(RESP)] println(RESP);
		[!? analyse(RESP)] forward qdc_notification_manager -m notification : notification(RESP);	
		[!? analyse(RESP)] removeRule parameter(PARAMETER)
	]
	
}

QActor qdc_notification_manager context ctx_data_centre {
	
	Rules {
		send_to_doctor(febbre) :- notification(febbre).
	}
	
	Plan init normal [
		println(" --- [NM] initializing --- ")	
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [NM] waiting notification --- ")
	] transition stopAfter 86400000
	  whenMsg notification -> sendNotification
	  finally repeatPlan
	  
	Plan sendNotification resumeLastPlan [
		println(" --- [NM] sending notification --- ");
		onMsg notification : notification(DESCRIPTION) -> addRule notification(DESCRIPTION); 
		[!? send_to_doctor(DESCRIPTION)] forward qdoctor_notification_receiver -m notification : notification(DESCRIPTION);
		[?? notification(DESCRIPTION)] forward qpatient_notification_receiver -m notification : notification(DESCRIPTION)			
	]
	
}

QActor qdoctor_data_retriever context ctx_doctor {
		
	Plan init normal [
		println(" --- [D] initializing --- ")	;
		actorOp createGUI
	] switchTo waitUserRequest
	  
	Plan waitUserRequest [
		println(" --- [D] waiting for user request --- ")
	] transition stopAfter 86400000
	  whenEvent doctor_data_request -> requestData
	  finally repeatPlan
	
	Plan requestData [
		delay 3000;
		println(" --- [D] requesting data --- ");
		forward qdc_data_receiver -m patient_parameters_request : patient_parameters_request
	] switchTo waitResponse
	
	Plan waitResponse resumeLastPlan [
		println(" --- [D] waiting for a response --- ")
	] transition stopAfter 60000
	  whenMsg patient_parameters_response -> visualiseData
	  
	Plan visualiseData [
		println(" --- [D] visualizing data --- ");
		onMsg patient_parameters_response : patient_parameters_response(LIST) -> actorOp print(LIST)
	] switchTo waitUserRequest
	
}

QActor qdoctor_notification_receiver context ctx_doctor {
	
	Plan init normal [
		println(" --- [DNR] initializing --- ")	
	] switchTo waitNotification
	
	Plan waitNotification [
		println(" --- [DNR] waiting notification --- ")
	] transition stopAfter 86400000
	  whenMsg notification -> receiveNotification
	  finally repeatPlan
	  
	Plan receiveNotification resumeLastPlan [
		println(" --- [DNR] receive notification --- ");
		onMsg notification : notification(DESCRIPTION) -> println(DESCRIPTION)
	]
	
}

QActor qdoctor_notification_sender context ctx_doctor {
	
	Plan init normal [
		println(" --- [DNS] initializing --- ")	
	] switchTo sendNotification
	
	Plan sendNotification [
		println(" --- [DNS] sending notification --- ");
		forward qpatient_notification_receiver -m notification : notification("I notify you about...");
		delay 60000
	] finally repeatPlan
	
}

